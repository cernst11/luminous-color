<!--
@license
Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
-->

<link rel="import" href="../polymer/polymer.html">
<link rel="import" href="../paper-input/paper-input.html">
<link rel="import" href="../paper-dialog/paper-dialog.html">
<link rel="import" href="../paper-button/paper-button.html">
<link rel="import" href="../paper-color-picker/paper-color-circle.html">
<link rel="import" href="../paper-color-picker/paper-color-picker.html">
<link rel="import" href="../paper-color-picker/paper-color-input.html">
<link rel="import" href="../paper-card/paper-card.html">
<!--<link rel="import" href="../socket-io/socket-io.html">-->
<script src="lib/socket.io.js"></script>

<!--
Example:

    <luminous-color></luminous-color>

Example:

    <luminous-color>
      <h2>Hello luminous-color</h2>
    </luminous-color>

@demo demo/index.html
@hero hero.svg
-->

<dom-module id="luminous-color">
  <template>
    <style>
      :host {
        display: block;
        box-sizing: border-box;
      }

      .author img {
        display: block;
        float: left;
        margin-right: 5px;
        max-height: 100px;
        max-width: 100px;
      }

      paper-color-circle{
        width:200px;
        height:200px;
      }

    </style>

    <h1>&lt;luminous-color&gt;</h1>
    <content></content>

    <div>
      <p>{{immediateColor.red}}</p>
      <p>{{immediateColor.green}}</p>
      <p>{{immediateColor.blue}}</p>


      <p>{{colorAsString}}</p>
      <paper-button  class="paper-font-body1" onclick="this.parentElement.querySelector('paper-color-picker').open()">
        Standard dialog
      </paper-button>
      <paper-color-picker immediate-color="{{immediateColor}}"  ></paper-color-picker>
      <script>
        document.querySelector('paper-color-picker').open()
      </script>


    </div>

    <paper-card>
<!--      <socket-io id="socketIo" socketUrl="http://192.168.1.112:5000" namespace="/test"
                 connected={{connected}}
                 outMessage={{outMessage}} listenTo=["message"] >
      </socket-io>-->


      Connected: <input type="checkbox" checked={{connected}} disabled/>
    <input type="button" value="connect" on-tap="connect"> </input>
    <input type="text" id="messageInput" disabled="{{!connected}}"/>
      <paper-button on-tap="sendMessage">Send</paper-button>
      <p>{{connected}}</p>
    </paper-card>

  </template>

  <script>
    Polymer({
      is: 'luminous-color',

      properties: {
        /**
         * `fancy` indicates that the element should don a monocle and tophat,
         * while checking its pocket watch.
         */
        fancy: Boolean,
        connected: true,
        autoConnect:true,
        messages: [],
        clients: {},


        /**
         * Describes the author of the element, but is really just an excuse to
         * show off JSDoc annotations.
         *
         * @type {{name: string, image: string}}
         */
        author: {
          type: Object,
          // Use `value` to provide a default value for a property, by setting it
          // on your element's prototype.
          //
          // If you provide a function, as we do here, Polymer will call that
          // _per element instance_.
          //
          // We do that to ensure that each element gets its own copy of the
          // value, rather than having it shared across all instances (via the
          // prototype).
          value: function() {
            return {
              name:  'Dimitri Glazkov',
              image: 'http://addyosmani.com/blog/wp-content/uploads/2013/04/unicorn.jpg',
            };
          }
        },
      },

      // Element Lifecycle

      ready: function() {

        var namespace = '/test'; // change to an empty string to use the global namespace

        // the socket.io documentation recommends sending an explicit package upon connection
        // this is specially important when using the global namespace*
        var socket = io.connect('http://' + '192.168.1.112' + ':3000' + namespace );

        socket.on('connect', function(msg) {
          socket.emit('connection', {connection: 'Connected'});
        });

        socket.on('message', function(msg){
          console.log(msg.time)

        });


        // `ready` is called after all elements have been configured, but
        // propagates bottom-up. This element's children are ready, but parents
        // are not.
        //
        // This is the point where you should make modifications to the DOM (when
        // necessary), or kick off any processes the element wants to perform.
      },

      attached: function() {
        // `attached` fires once the element and its parents have been inserted
        // into a document.
        //
        // This is a good place to perform any work related to your element's
        // visual state or active behavior (measuring sizes, beginning animations,
        // loading resources, etc).
      },

      detached: function() {
        // The analog to `attached`, `detached` fires when the element has been
        // removed from a document.
        //
        // Use this to clean up anything you did in `attached`.
      },

      connect:function(){


/*        var openMessage = {connection: 'Connected'};
        this.$.socketIo.connect();


        this.outMessage = {event : 'connection', data : openMessage};*/
      },

      sendMessage:function(){
        if(this.$.messageInput.value != "") {
          console.log(this.$.messageInput.value);
          var baseMessage = {pixelMode:'color',pixelColor: '#FFFFFF'};//without timestamp etc outmessage does not change (change handlers)
          this.outMessage = {event:"color", data: baseMessage};
          //this.messages.push(baseMessage);
          this.$.messageInput.value = "";//since we don't do databind we reset the field manually
        }
      },

      // Element Behavior


      /**
       * Sometimes it's just nice to say hi.
       *
       * @param {string} greeting A positive greeting.
       * @return {string} The full greeting.
       */
      sayHello: function(greeting) {
        var response = greeting || 'Hello World!';
        return 'luminous-color says, ' + response;
      },

      /**
       * The `luminous-color-lasers` event is fired whenever `fireLasers` is called.
       *
       * @event luminous-color-lasers
       * @detail {{sound: String}}
       */

      /**
       * Attempt to destroy this element's enemies with a beam of light!
       *
       * Or, at least, dispatch an event in the vain hope that someone else will
       * do the zapping.
       */
      fireLasers: function() {
        this.fire('luminous-color-lasers', {sound: 'Pew pew!'});
      }
    });
  </script>
</dom-module>
